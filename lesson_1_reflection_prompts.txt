How did viewing a diff between two versions of a file help you see the bug that
was introduced?

A: diff -h helped to point out only a few lines that changed in the new file, making
it much easier to hone in on the error.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

A: having entire file history makes it easier to track changes and pinpoint code
errors.  If the history viewing feature points to the line numbers that were changed,
a programmer can go straight to those lines and fix the error instad of seaching
through the entire progam.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

A:
pros: fine grain control over changes, a programmer determines what warrants saving
criteria.
cons: programmer may forget to save manually, when working with multiple files a
programmer may forget which files were saved when.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

A: it makes tracking changes across multiple files easier between commits.

How can you use the commands git log and git diff to view the history of files?

A: git log can used to find out when the changes were made and read comments about
changes, if the programmer wrote them.  git diff can be used to see the exact line
changes between the commits.

How might using version control make you more confident to make changes that
could break something?

A: it makes it easeier to revert to the last woking version and fix the errors

Now that you have your workspace set up, what do you want to try using Git for?

A: I will use it for raspberry pi, arduino, and pyhton project.  I will also use it to
keep track of custom configuration scripts for my Linux machines.


